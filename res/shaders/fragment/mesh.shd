#version 420

uniform vec4 u_ka, u_kd, u_ks;
uniform float u_ns;

in vec3 normal_dir, frag_pos, camera_pos;

layout(location=0) out vec4 output_color;

uniform vec4 u_light_position;

void main() {
    vec3 normal = normalize(normal_dir);
    vec3 light_dir = normalize(u_light_position.xyz - frag_pos);

    float nl = max(dot(normal, light_dir), 0.0);
    vec4 diffuse = u_kd * nl;

    vec3 camera_dir = normalize(camera_pos - frag_pos);
    vec3 reflect_dir = reflect(-light_dir, normal);
    vec4 specular = u_ks * pow(max(dot(camera_dir, reflect_dir), 0.0), u_ns);
    if (nl <= 0) specular = vec4(0);

    output_color = vec4(u_ka.rgb + diffuse.rgb + specular.rgb, 1.0);
}
