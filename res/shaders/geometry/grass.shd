#version 420

layout (triangles) in;
layout (triangle_strip, max_vertices = 7) out;

in data {
    vec3 normal_dir;
    vec3 frag_pos;
} vertices[3];

out data {
    vec3 normal_dir;
    vec3 frag_pos;
} frag;

uniform mat4 u_proj, u_view;
uniform float t;

const float width = 0.02;
const float height = 0.07;

vec3 grass[7] = vec3[7](
vec3(width, 0, 0),
vec3(-width, 0, 0),

vec3(width, 2*height, 0),
vec3(-width, 2*height, 0),

vec3(width, 3*height, 0),
vec3(-width, 3*height, 0),

vec3(0, 4*height, 0)
);

vec3 NormalFromTriangleVertices(vec3 triangleVertices[3]) {
    vec3 u = triangleVertices[0] - triangleVertices[1];
    vec3 v = triangleVertices[1] - triangleVertices[2];
    return cross(v, u);
}


float compute_inclinaison(vec3 position) {
    return cos(position.x + t)/3.0 + sin(position.y - t)/3.0 + cos(position.x * position.y)/3.0;
}

float rand(vec2 co) {
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

void main() {
    vec4 origin = (gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position) / 3.0;

    vec3 pos = origin.xyz;

    float inclin = compute_inclinaison(pos);
    float amplitude = rand(pos.xy) / 1.0;

    grass[0] += vec3(0, 0, inclin * amplitude * width);
    grass[1] += vec3(0, 0, inclin * amplitude * width);

    grass[2] += vec3(0, 0, inclin * amplitude * width * 2);
    grass[3] += vec3(0, 0, inclin * amplitude * width * 2);

    grass[4] += vec3(0, 0, inclin * amplitude * width * 3);
    grass[5] += vec3(0, 0, inclin * amplitude * width * 3);

    grass[6] += vec3(0, 0, inclin * amplitude);


    for (int i = 0; i < 7; i++) {
//        vec3 normal = NormalFromTriangleVertices(vec3[](grass[(i)%7], grass[(i+1)%7], grass[(i+2)%7]));
        frag.normal_dir = vec3(-1.0, 0.0, 1.0);
        frag.frag_pos = grass[i] + pos;
        gl_Position = u_proj * u_view * vec4(grass[i] + pos, 1.0);
        EmitVertex();
    }

    EndPrimitive();
}
