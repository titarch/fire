#version 420
#include <random>


layout (points) in;
layout (triangle_strip, max_vertices = 5) out;

in vec3 pos;
const vec4 dark_color = vec4(0, 0.5, 0.2, 1);
const vec4 light_color = vec4(0. 0.7, 0.4, 1);

vec3 grass[7] = vec3[7](
    vec3(0.75, 0, 0);
    vec3(-0.75, 0, 0);

    vec3(0.75, 0.5, 0);
    vec3(-0.75, 0.5, 0);

    vec3(0.75, 1, 0);
    vec3(-0.75, 1, 0);

    vec3(0, 2, 0);
);

float compute_inclinaison(vec3 position)
{
    return cos(postion.x)/3.0 + sin(position.y)/3.0 + cos(position.x * position.y)/3.0;
}

void main() {
    
    float inclin = compute_inclinaison(pos);
    float amplitude = ((double) rand() / (RAND_MAX)) + 1;

    grass += pos;
    grass[0] += vec3(0, 0, inclin * amplitude * 0.35);
    grass[1] += vec3(0, 0, inclin * amplitude * 0.35);

    grass[2] += vec3(0, 0, inclin * amplitude * 0.5);
    grass[3] += vec3(0, 0, inclin * amplitude * 0.5);

    grass[4] += vec3(0, 0, inclin * amplitude * 0.75);
    grass[5] += vec3(0, 0, inclin * amplitude * 0.75);

    grass[6] += vec3(0, 0, inclin * amplitude);

    for (int i = 0; i < 7; i++) {
        gl_Position = grass[i];
        EmitVertex();
    }

    EndPrimitive();
}
